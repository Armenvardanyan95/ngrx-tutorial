"use strict";(self.webpackChunkngrx_course=self.webpackChunkngrx_course||[]).push([[999],{3642:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var n=a(7462),o=a(3366),i=(a(7294),a(3905)),r=a(6213),s=["components"],l={title:"Chapter 5: Actions",sidebar_position:5},c=void 0,p={unversionedId:"chapter-5",id:"chapter-5",isDocsHomePage:!1,title:"Chapter 5: Actions",description:"What are Actions?",source:"@site/docs/chapter-5.mdx",sourceDirName:".",slug:"/chapter-5",permalink:"/ngrx-essentials-course/docs/chapter-5",editUrl:"https://github.com/this-is-angular/ngrx-essentials-course/edit/main/docs/chapter-5.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Chapter 5: Actions",sidebar_position:5},sidebar:"courseSidebar",previous:{title:"Chapter 4: NgRx: The Why",permalink:"/ngrx-essentials-course/docs/chapter-4"},next:{title:"Chapter 6: Reducers",permalink:"/ngrx-essentials-course/docs/chapter-6"}},d=[{value:"What are Actions?",id:"what-are-actions",children:[]},{value:"What does an Action look like?",id:"what-does-an-action-look-like",children:[{value:"Homework",id:"homework",children:[]}]}],h={toc:d};function m(e){var t=e.components,a=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-are-actions"},"What are Actions?"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Actions"),' are the most simple core concept of NgRx (and Redux in general). Action is a unique event that is used to trigger a change in the state. What does it mean? For example, we might have an action that says "Home page has been loaded". It might mean some changes in the state. For example, in our application, it might trigger an API call for lists of expenses and incomes, which will in turn trigger an event that puts that data in the ',(0,i.kt)("inlineCode",{parentName:"p"},"Store"),', resulting in a change in the UI. Or we might have an action that says "Add a category", which will create a new category of income/expense in the ',(0,i.kt)("inlineCode",{parentName:"p"},"Store"),", again resulting in a UI change. Again, essentially ",(0,i.kt)("inlineCode",{parentName:"p"},"Actions")," are like commands to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),", or methods that allow to update its contents."),(0,i.kt)("h2",{id:"what-does-an-action-look-like"},"What does an Action look like?"),(0,i.kt)("p",null,"Actions are simple. An action is usually an object with just two properties: a ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),", a string that indicates what ",(0,i.kt)("em",{parentName:"p"},"exactly")," that action represents, and an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," that is kind of like a function argument. In our example, an action that adds a category might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const addCategoryAction = {\n  type: "[Categories List] Add Category",\n  payload: { name: "Food" },\n};\n')),(0,i.kt)("p",null,"This is an action that adds a category named ",(0,i.kt)("inlineCode",{parentName:"p"},"Food")," to the list of all categories. Of course, we still haven't written the logic that actually uses this action to put the data in the store, but for now we are focusing on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Actions"),". In NgRx, there is a simpler, built-in way of creating ",(0,i.kt)("inlineCode",{parentName:"p"},"Actions"),", namely the ",(0,i.kt)("inlineCode",{parentName:"p"},"createAction")," function. To start learning about it, let's create a folder names ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," in our ",(0,i.kt)("inlineCode",{parentName:"p"},"src/app")," directory, and a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"actions.ts")," inside it. Now, let's put this code inside that file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// src/app/state/actions.ts\nimport { createAction, props } from "@ngrx/store";\nimport { Category } from "./state";\n\nexport const addCategory = createAction(\n  "[Category List] Add Category",\n  props<{ category: Category }>()\n);\n')),(0,i.kt)("p",null,"Let's break down this example. First of all, the name ",(0,i.kt)("inlineCode",{parentName:"p"},"createAction")," is a bit deceptive; it does not create an action; in fact, it creates a function which, when called, wil produce an action object. The first argument is the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of the action that will be produced. When called, the ",(0,i.kt)("inlineCode",{parentName:"p"},"addCategory")," function will ",(0,i.kt)("strong",{parentName:"p"},"always"),' create an action with type "',"[Category List]",' Create Category". The second argument uses the bizarre function ',(0,i.kt)("inlineCode",{parentName:"p"},"props"),", which is a generic function that allows us to define the type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," which the created action will have. Essentially, it explains that in order to create the action using the ",(0,i.kt)("inlineCode",{parentName:"p"},"addCategory")," function, we should call it and provide an object that has a property ",(0,i.kt)("inlineCode",{parentName:"p"},"category")," which is defined in the Interface Category defined in the AppState. Let's do this and ",(0,i.kt)("inlineCode",{parentName:"p"},"console.log")," the result."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// src/app/app.component.ts\nimport { Component, OnInit } from "@angular/core";\n\nimport { addCategory } from "./state/actions.ts";\n\n@Component({\n  // component boilerplate omitted for the sake of brevity\n})\nexport class AppComponent implements OnInit {\n  ngOnInit() {\n    console.log(addCategory({category:{ name: "Food" }}));\n  }\n}\n')),(0,i.kt)("p",null,"In the console, we will see the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{category: {name: 'Food', type: '[Category List] Add Category'}}\n")),(0,i.kt)("p",null,"So essentially, ",(0,i.kt)("inlineCode",{parentName:"p"},"createAction")," provided us with an easy way of creating actions of the same type. ",(0,i.kt)("inlineCode",{parentName:"p"},"addCategory")," in our case is an ",(0,i.kt)("inlineCode",{parentName:"p"},"ActionCreator"),", a function which produces an action object whenever called, and ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," explained what argument that ",(0,i.kt)("inlineCode",{parentName:"p"},"ActionCreator")," function expects."),(0,i.kt)("h3",{id:"homework"},"Homework"),(0,i.kt)("p",null,"Yes, you've read it correctly: we have learned how to write some basic code in NgRx, so it is time for some homework!\n",(0,i.kt)("em",{parentName:"p"},"For this homework, assume categories cannot have duplicate names. We will deal with this problem later")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create an action for deleting a category. It should receive a string with the name of the category, and in the next chapter we will use that code to write the actual logic for deleting the category."),(0,i.kt)("li",{parentName:"ol"},"Create an action for updating a category. It must receive a ",(0,i.kt)("inlineCode",{parentName:"li"},"Category")," object (",(0,i.kt)("inlineCode",{parentName:"li"},"{name: string}"),"), and again, we will right the code to update the category in the next chapter")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You will find solution code for all the homeworks in the end of the chapters\n",(0,i.kt)("strong",{parentName:"p"},"Important!")," Do not move to the next chapter without adding the homework code! We will be using that code in the next chapters")),(0,i.kt)("p",null,"In this chapter, we learned how to create ",(0,i.kt)("inlineCode",{parentName:"p"},"Actions"),", unique events that specify what should happen to the state. In the next one, we will be writing code that actually does the transformation in the state."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Exercise 1 solution"),(0,i.kt)(r.Z,{title:"actions.ts",className:"language-ts",mdxType:"CodeBlock"},'const deleteCategory = createAction(\n  "[Category List] Delete Category",\n  props<{name: string}>()\n);\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Exercise 2 solution"),(0,i.kt)(r.Z,{title:"actions.ts",className:"language-ts",mdxType:"CodeBlock"},'const updateCategory = createAction(\n  "[Category List] Update Category",\n  props<{ name: string }>()\n);\n')))}m.isMDXComponent=!0}}]);